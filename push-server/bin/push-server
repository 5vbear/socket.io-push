#!/bin/bash

if [ -f "pid/pid" ]
   then
     kill `cat pid/pid`
     echo "killing `cat pid/pid`"
     while [[ ${?} == 0 ]]      # Repeat until the process has terminated.
     do
        sleep 0.1              # Wait a bit before testing.
        ps -p `cat pid/pid` >/dev/null  # Check if the process has terminated.
     done
     rm -rf pid/pid
   fi

mkdir -p log
mkdir -p pid

ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}' > ip

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.
ARGS="$@"
# Initialize our own variables:
COUNT=1
DEBUG=0
VERBOSE=0
FOREGROUND=0
LOG_FILE=prod.log
LOG_DIR=log

while getopts "h?c:d?f?v?l:" opt; do
    case "$opt" in
    c)  COUNT=$OPTARG
        ;;
    d)  DEBUG=1
        ;;
    v)  VERBOSE=1
        ;;
    f)  FOREGROUND=1
        ;;
    l)  LOG_DIR=$OPTARG
       ;;
    esac
done

mkdir -p $LOG_DIR

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "DEBUG=$DEBUG, COUNT='$COUNT',FOREGROUND='$FOREGROUND', Leftovers: $@"

if [ $DEBUG = 1 -a $FOREGROUND = 1 ]; then
    export DEBUG=apn,apn:socket,apn:trace,NotificationService,RestApi,TTLService,AdminCommand,ApiThreshold,ProxyServer,ApnService
    LOG_FILE=debug.log
elif [ $VERBOSE = 1 -a $FOREGROUND = 1 ]; then
    export DEBUG=SimpleRedisHashCluster,apn,Stats,socket.io*,ProxyServer,PacketService,NotificationService,RestApi,TTLService,Sentinel,AdminCommand,ApiThreshold,ApnService
    LOG_FILE=verbose.log
else
	unset DEBUG
fi

BASEDIR=$(dirname $0)

node_script="$BASEDIR/node-push-server"

if [ $FOREGROUND = 1 ]; then
    $node_script $ARGS
    exit
fi

   echo "starting push-server in background"
   nohup $node_script $ARGS >> $LOG_DIR/console.log 2>&1 & echo $! > pid/pid
