#!/bin/bash

mkdir -p log
mkdir -p pid

ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}' > ip

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
COUNT=1
DEBUG=0
VERBOSE=0
FOREGROUND=0
LOG_FILE=prod.log

while getopts "h?c:d?f?v?" opt; do
    case "$opt" in
    c)  COUNT=$OPTARG
        ;;
    d)  DEBUG=1
        ;;
    v)  VERBOSE=1
                ;;
    f)  FOREGROUND=1
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "DEBUG=$DEBUG, COUNT='$COUNT',FOREGROUND='$FOREGROUND', Leftovers: $@"

if [ $DEBUG = 1 ]; then
    export DEBUG=apn,PacketService,NotificationService,RestApi,TTLService
    LOG_FILE=debug.log
else
	export DEBUG=
fi

if [ $VERBOSE = 1 ]; then
    export DEBUG=SimpleRedisHashCluster,apn,Stats,socket.io*,ProxyServer,PacketService,NotificationService,RestApi,TTLService,Sentinel
    LOG_FILE=verbose.log
else
	export DEBUG=
fi

BASEDIR=$(dirname $0)

node_script="$BASEDIR/node-push-server"

if [ $FOREGROUND = 1 ]; then
    $node_script "$@"
    exit
fi

rm -f log/*

for (( c=1; c<=COUNT; c++ ))
do
   if [ -f "pid/$c.pid" ]
   then
     kill `cat pid/$c.pid`
     echo "killing #$c"
     while [[ ${?} == 0 ]]      # Repeat until the process has terminated.
     do
        sleep 0.1              # Wait a bit before testing.
        ps -p `cat pid/$c.pid` >/dev/null  # Check if the process has terminated.
     done
     rm pid/$c.pid
   fi
   echo "starting instance #$c in background"
   nohup $node_script "$@" -i $c  > log/$c.log 2>&1 & echo $! > pid/$c.pid
done