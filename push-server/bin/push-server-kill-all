#!/bin/sh

mkdir -p logs
mkdir -p pids

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
COUNT=1
DEBUG=0
FOREGROUND=0

while getopts "h?c:d?f?" opt; do
    case "$opt" in
    c)  COUNT=$OPTARG
        ;;
    d)  DEBUG=1
        ;;
    f)  FOREGROUND=1
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "DEBUG=$DEBUG, COUNT='$COUNT',COUNT='$COUNT', Leftovers: $@"

if [ "$DEBUG" -gt 0 ]; then
    export DEBUG=apn,SimpleRedisHashCluster,socket.io*,PacketService,NotificationService,RestApi,Stats,TTLService
else
	export DEBUG=
fi

BASEDIR=$(dirname $0)

node_script="$BASEDIR/node-push-server"

if [ -f "$node_script" ]
then
	echo "dev dir"
else
	echo "use npm package bin"
	$node_script = node-push-server
fi

if [ "$FOREGROUND" -gt 0 ]; then
    $node_script "$@"
fi

for (( c=1; c<=COUNT; c++ ))
do
   if [ -f "pids/$c.pid" ]
   then
     kill `cat pids/$c.pid`
     echo "killing #$c"
     while [[ ${?} == 0 ]]      # Repeat until the process has terminated.
     do
        sleep 0.1              # Wait a bit before testing.
        ps -p `cat pids/$c.pid` >/dev/null  # Check if the process has terminated.
     done
     rm pids/$c.pid
   fi
   echo "starting instance #$c in background"
   nohup $node_script "$@" -i $c  > logs/$c.log 2>&1 & echo $! > pids/$c.pid
done